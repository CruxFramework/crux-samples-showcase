
buttonDescription = <p>Buttons are elements that trigger actions when clicked on. These components were conceived also thinking of touch devices, handling events differently on a smartphone or tablet, for example.</p>

colorPickerDialogDescription = <p>The ColorPicker is a component that allows the user to select a color from a color spectrum and apply it to a given element. The functionality is similar to color pickers found in desktop software.</p>

adaptivegridDescription = <p>The DeviceAdaptiveGrid component allows you to display the columns according to the type of device used to view. For large-screen devices (PC, tablet, etc.), the grid displays the columns defined in the <code>largeColumns</code> tag, whereas for small-screen devices, it displays the columns defined in the <code>smallColumns</code> tag.</p>

selectablePanelDescription =<p>The Selectable Panel is a selection panel which was built also thinking of touch devices , treating the events differently on a smartphone or tablet , for example.</p>

anchorDescription = <p>The Anchor component is a cross-device anchor.  With this component you can create navigation links on the same page (Go to the bottom of the page, Go to the top of the page), in addition to links to open external pages (Crux Framework link in the example). You can also trigger events by clicking on the component, such as an informative pop-up that appears when you click on the first example.</p>

downloadButtonDescription = <p>The Download Button widget allows saving files on our machine in the best possible way treating them as if they were links or even a static content in data-uri. In both cases, there are peculiarities to protect these files, where many were resolved by <code> download </code> HTML5 attribute. But for older browsers, this property does not exist, then this component is able to identify the browser setting and treat saving properly.</p>

pagersDescription = <p> The pagers are elements that interact with the Data Provider. Through them, we can move forward or backward pages. There are 2 main types of data providers: the first one is when we need to go on the server to retrieve new data on every page change. And the other one is considers the data page have been previously brought by the server. In both cases, there are 5 types of pagers that we can use: </p> <ul><li> <code> Sequential Pager </code>: Pager unaware that the data size and consists of forward and back buttons; </li><li> <code> Bullets Pager </code>: Pager who knows the size of the data, represents the pages as bullets; </li><li> <code> Predictive Pager </code>: Pager who knows the size of the data, represents the pages in a list box and has forward and back buttons; </li><li> <code> Pager Swap </code>: Pager that ignores the size of the data, allows the transition of the pages through animations; </li><li> <code> Scrollable Pager </code>: Pager who does not know the data size, and lets you bring new data when the scroll event happens. </li></ul>

breadcrumbDescription = <p>The Breadcrumb component allows you to build a state between its transitions. It controls a container of views and the page history. Thus, when changing between their states, the page history will be changed together with the current view. In addition, it works as a stack where we can determine and control the user steps.</p>

dateBoxDescription = <p>The DateBox component allows you to select dates to be assigned for a textBox. It uses the DatePicker component.</p>
	
labelDescription = <p>Labels are elements that trigger actions when clicked, this component was also built for touch devices, treating the events differently on a smartphone or tablet, for example.</p>
	
dialogBoxDescription = <p>Dialogboxes are floating windows, overlapping the main window to allow some type of additional communication with the user. They are quite useful to display data portions which would occupy much space on the screen, or even to handle secondary flows in cases of application use.</p> <p>You can add only a single component to the DialogBox. However, it may be any valid component, from a button to a panel.</p>
	
tabPanelDescription = <p>TabPanel is a panel where you can display multiple pages in the same space, and you can use tabs to switch the content to be viewed.</p><p>This component has an animation for the transition of pages that can be activated. Each component tab can vary from title options (tab) and content. The tabs can contain any valid component from a button to a complete panel.</p>

tabViewContainerDescription = <p>The TabViewContainer component allows multiple views to share the same space. A tab can be selected for viewing by clicking on its name at the top or can be closed by clicking the close button (x). In the example shown it is possible to remove a tab by clicking the Remove selected tab button and you can also add a new tab by clicking the ' Add Url ' button.</p>

restDescription = <p>Rest communication with a server over the RESTFUL architecture. Through this feature, we can map our Rest call through annotations consistent with JAX- WS 1.x. Crux will be responsible for serialization and deserialization of data.</p>

dialogViewContainerDescription = <p>DialogViewContainer is a view container that uses a floating dialog box to display views, making it possible to use the benefits of a floating window to complete views. <p/> <p>In the example shown, the container loads a view simulating a sign-up screen.</p>

fileUploaderDescription = <p>The FileUploader is a component capable of transmitting files present in the client device to the application server. Built on the XMLHttpRequest 2 specification, it can send multiple files simultaneously and provide the user with progress feedback. In addition, if an uploaded file is an image, the component displays a thumbnail of this file, enhancing system usability.</p>	

filterDescription = <p>The Filter component is a text box that suggests possible results based on user-entered content. It is a facilitator for users at the time they need to enter or browse some information. The Filter also allows the enabling of features such as: animation, automatic selection and the activation of a focus in the localized string.<p/> <p>In the above example, when the user starts typing, the text box displays possible suggestions of means of transport according to the data entered.</p>	
	
formDisplayDescription = <p>The purpose of FormDisplay is to organize the elements of a form, making it easier to build screens whose content is essentially data entry. It organizes the components automatically, providing different positions according to the characteristics of the client device.<p/> <p>In small-screen devices, such as smartphones, components are ordered vertically, avoiding horizontal scrolling of the screen. In larger devices, labels and components are aligned side by side, making better use of the width of the browser window.</p>	

textBoxDescription = <p>Textboxes are simple text fields provided by GWT. They can be styled depending on their state, and visually show their current state to the user.</p>

imageDescription = <p>The Image component displays images in standard web formats (png, gif, jpg) with size adjustment (height and width).</p> <p>In the example, when an image is clicked on, its size is changed and its information is presented below.</p>

listShuttleDescription = <p>The ListShuttle is a component that enables item transferring from one list to another. You can transfer one, several or all elements at once. </p> <p>In the example shown the items on the lists were added by means of a controller, which makes it possible for this information to be quested from a data source.</p>

maskedLabelDescription = <p>The ListShuttle is a component that enables item transferring from one list to another. You can transfer one, several or all elements at once.</p> <p>In the example shown the items on the lists were added by means of a controller, which makes it possible for this information to be quested from a data source.</p>

simpleDatabaseDescription = <p>Crux supports database for the client side of the application. Register new people in the list above by clicking the Add button. The bank can be WebSQL or IndexedDB, Crux will switch between either implementation depending on your browser support.</p>

simpleViewContainerDescription = <p>The SimpleViewContainer is a component that allows the management of the views of our application. It manages the Life cycle of a view, loading and unloading it when necessary.</p>

maskedTextBoxDescription = <p>The MaskedTextBox is an information input component that can be associated with a Formatter to guide the user during the filling-out process and ensure the conversion of this information into typed data to be consumed by application.</p> <p>In this example, we associated the MaskedTextBox to read a date typed by the user.</p>

messageBoxDescription = <p>MessageBox is a floating window used to display textual information to the user. The MessageBox shows a specific visual style depending on the category of the message displayed (<code>INFO</code>, <code>SUCCESS</code>, <code>WARN</code> or <code>ERROR</code>).</p>

numberTextBoxDescription = <p>The NumberTextBox is a text box that only allows positive integers to be entered.</p> <p>This component allows you to set a maximum amount of characters that can be entered. It can also trigger an event based on changes of values in the text box.</p>

progressBoxDescription = <p>ProgressBox is a floating component used to indicate to the user that some internal processing is taking place, preventing user from performing other actions before processing ends. It can be programmatically shown and hidden. The asynchronous nature of the communication makes it quite useful in calls to remote services.</p>

promoBannerDescription = <p>PromoBanner is a component to promote something: a product, an idea, a subject, among others.</p> <p>It can be adapted for use on large-screen devices such as desktops and small-screen ones such as cell phones. It has various features, such as: automatic transition from one image to another with interval determination, transition time programming control button, among others.</p>

scrollBannerDescription = <p>The ScrollBanner is a component to display several text messages, one at a time, presented periodically and in sequence. Messages can be added declaratively or programmatically and the transition time between them is defined in the component.</p> <p>In the above example, the first two messages were added declaratively and the last ones were added programmatically through the controller.</p>

singleSelectDescription = <p>The SingleSelect component is a single, simple selection list box. The items can be added declaratively and programmatically and you can also define whether or not any item will already be selected at start.</p> <p>In the example shown, items in the box on the right will only be loaded after an item in the box on the left is chosen.</p>

slideShowDescription = <p>The Slideshow is a component used to display pictures in an optimized way for each type of device. It supports descriptions, thumbnails, preload of the next images, local cache of images viewed, automatic image resizing, grouping into albums, etc.</p> <p>It has a flexible model that allows the developer to adapt almost any desired layout model, in addition to promoting integration with external APIs imaging services, such as Picasa.</p>

stackMenuDescription = <p>The StackMenu is a hierarchical vertical menu. Each item in a StackMenu may have one or more sub-items, inserted declaratively or programmatically. You can also trigger selection events in this component. The example shown displays information regarding the selected item.</p>
	
styledPanelDescription = <p>The StyledPanel is a simple panel intended to visually group components that somehow relate with one another. It is generally used to delineate forms and menus as well as to create toolbars. Its internal structure is light, consisting of two nested DIVs, which allows great styling flexibility by using CSS3 features.</p> <p>It supports only one component inside, because it does not provide any resources for internal component alignment. Thus, to house various components within a StyledPanel, you must group them logically in another component that allows so, such as, for example, FormDisplay.</p>

storyBoardDescription = <p>The StoryBoard is an element distribution panel that adapts to the type of device.</p> <p>On large-screen devices such as desktops, the elements are distributed side by side as far as the end of the specified width, generating an automatic line break and continuing to fill out with elements until the end. In small-screen devices such as cell phones, the process is the same, but the elements are arranged one below the other, thus adapting to cell phone visibility.</p> <p>The items in the Storyboard can be inserted declaratively or programmatically, allowing the use of a list of data, as shown in this example.</p>

textAreaDescription = <p>TextArea is a multi-line text field, which can be defined by the number of lines and the maximum number of characters (maxLength).</p> <p>In this example, the maximum number of characters starts at 150, enter a new number, click Apply and test.</p>

timerDescription = <p>The Timer component is a time counter capable of triggering planned events. This component also allows you to activate a countdown or set a certain value to start counting.</p> <p>In the example shown, the Timer performs the functions of a stopwatch and triggers a message when it reaches the 5-second count.</p>

randomPagerDescription = <p>RandomPager is a pager that is aware of the total number of pages. In this way, the end user can have more control over the paginated material. In the implemented example, the paging component makes the results of a grid component ( DeviceAdaptiveGrid ).</p>

menuDescription = <p>The menu is a cross-device component based on the nav tags ul and li. To compose your items and sub-items you can use HTML tags, strings and even other components. In this example we used the <code> Label </code> as the main item and were created custom components <code> MyMenuItem </code> to fill the sub-items.</p><p>The example also demonstrates that this menu has different ways of presentation. Through the attributes <code> largeType </code > and <code> smallType </code> can be defined as it will be displayed on large-screen devices such as desktops or small as smartphones, providing better viewing and usability.</p>

sideMenuDisposalDescription = <p>This is a cross-device component that besides being a menu, also defines the complete layout of a page. To this end, it automatically renders a menu, a viewContainer, a header and a footer. Thus, simply set values for the attributes of the layout and page will be ready. Even the connection between the menu and the views to be driven by it. The SideMenuDisposal also possible to change the type of menu display, providing the types <code> Accordion </code>, <code> Dropdown </code> , <code> Tree </code> and <code> Slide </code> ensuring a more adaptable layout needs.</p>

comboBoxDescription = <p>The ComboBox is a cross-device component for selecting an item from a list of elements. It allows these elements to be widgets, offering a greater degree of customization for application.</p>

topMenuDisposalDescription = <p>This is a cross-device menu component which also defines the full layout of the page. The topMenuDisposal consists of a menu, view a container, a header and a footer. To use it, simply set the values for their attributes and layout of the page will be ready. Even the connection between the menu and the views to be driven by it.</p>

widgetListDescription = <p>The WidgetList is a component that works with the Data Provider, it enables the creation of widgets lists.</p>

carouselDescription = <p>The Carousel is a component that works with the Data Provider, it allows the creation of a carousel of widgets.</p>

confirmDescription = <p>The confirm is a dialog box that is ready to give sequence to an action, after user confirmation. Thus, this component helps prevent navigational errors adversely affects the results to users. In the example, the user desires are confirmed before sending, and deleting the name of the stock , and you can choose yes or no at this time.</p>

swapPanelDescription = <p>SwapPanel is a panel allowing the exchange between components. These can be anything from a simple button even a complete form, depending on user needs . The component has a wide selection of animations, ensuring diversity in their use. The above example does not include all the component animation possibilities, but allows checking the operation of the exchange of animations and also the components. Another feature shown in the example is the launch event after the end of the animation, something quite useful in many applications.</p>

rollingPanelDescription = <p>RolligPanel is a scroll pane in which you can add any valid component like buttons, labels, a set of images, among others. In the first example rollingPanel consists of a set of images. In the second example it is formed by a custom component designed for a specific need.</p>

swapViewContainerDescription = <p>This is a view containe in which it is possible to exchange these views through animations that are easily assigned to the component</p>.

sliderDescription = <p>The Slider component is a cross-device panel that changes its content using slide animations. You can add any valid component in a Slider, you can also set the duration of transitions, set the panel home page and still have a circular effect for submission of the panel pages.</p>

sequentialPagerDescription = <p>SequentialPager is a pager that does not provide the size of the data source for instant load. This pager is aware of the size of the data source only after scanning all available pages. In the implemented example, the paging component makes the results of a grid component ( DeviceAdaptiveGrid ) .</p>

sortableListDescription = <p>The sortableList is a sort component. This allows it to be added any valid component in its scope ( <code> Label </code>, <code> Button </code >, <code> Image </code>, etc.) and carries out the manual sorting through their control buttons. This example lists tasks that can be rearranged according to their importance. It is also possible to perform the addition of a new task or removal of a selected task.</p>

dataGridDescription = <p>The DataGrid is a component that works with the Data Provider. It creates a table 100% tabless and allows functions such as sorting columns, editing lines, select (single or multiple) and so on.</p>
